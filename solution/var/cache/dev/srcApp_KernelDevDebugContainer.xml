<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/var/www/html/src</parameter>
    <parameter key="kernel.project_dir">/var/www/html</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">src</parameter>
    <parameter key="kernel.cache_dir">/var/www/html/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/var/www/html/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="MakerBundle">Symfony\Bundle\MakerBundle\MakerBundle</parameter>
      <parameter key="AwsBundle">Aws\Symfony\AwsBundle</parameter>
      <parameter key="SensioFrameworkExtraBundle">Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="MakerBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/symfony/maker-bundle/src</parameter>
        <parameter key="namespace">Symfony\Bundle\MakerBundle</parameter>
      </parameter>
      <parameter key="AwsBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/aws/aws-sdk-php-symfony/src</parameter>
        <parameter key="namespace">Aws\Symfony</parameter>
      </parameter>
      <parameter key="SensioFrameworkExtraBundle" type="collection">
        <parameter key="path">/var/www/html/vendor/sensio/framework-extra-bundle</parameter>
        <parameter key="namespace">Sensio\Bundle\FrameworkExtraBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">srcApp_KernelDevDebugContainer</parameter>
    <parameter key="container.dumper.inline_class_loader">true</parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="templating.helper.code.file_link_format">null</parameter>
    <parameter key="debug.file_link_format">null</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">/var/www/html/var/cache/dev/sessions</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="validator.mapping.cache.prefix"></parameter>
    <parameter key="validator.mapping.cache.file">/var/www/html/var/cache/dev/validation.php</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/var/www/html/var/cache/dev/srcApp_KernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_class_prefix">srcApp_KernelDevDebugContainer</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="serializer.mapping.cache.file">/var/www/html/var/cache/dev/serialization.php</parameter>
    <parameter key="serializer.mapping.cache.prefix"></parameter>
    <parameter key="aws_sdk.class">Aws\Sdk</parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="App\Command\AwsInitCommand" class="App\Command\AwsInitCommand" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <argument type="service" id="Aws\S3\S3Client"/>
      <argument>dev</argument>
      <call method="setName">
        <argument>app:aws-init</argument>
      </call>
    </service>
    <service id="App\Command\ImportCommand" class="App\Command\ImportCommand" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <argument type="service" id="messenger.bus.default"/>
      <call method="setName">
        <argument>app:import-tours</argument>
      </call>
    </service>
    <service id="App\Events\ImportFailedEvent" class="App\Events\ImportFailedEvent" autowire="true" autoconfigure="true"/>
    <service id="App\Events\ImportedEvent" class="App\Events\ImportedEvent" autowire="true" autoconfigure="true"/>
    <service id="App\Exceptions\NoClientException" class="App\Exceptions\NoClientException" autowire="true" autoconfigure="true"/>
    <service id="App\Exceptions\NoParserException" class="App\Exceptions\NoParserException" autowire="true" autoconfigure="true"/>
    <service id="App\Handler\ImportHandler" class="App\Handler\ImportHandler" autowire="true" autoconfigure="true">
      <tag name="messenger.message_handler"/>
      <argument type="service" id="App\Service\ClientProvider"/>
      <argument type="service" id="App\Service\ParserProvider"/>
      <argument type="service" id="Aws\S3\S3Client"/>
      <argument>%env(resolve:TOUR_STORAGE_S3_BUCKET)%</argument>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="App\Message\ImportMessage" class="App\Message\ImportMessage" autowire="true" autoconfigure="true"/>
    <service id="App\Service\ClientProvider" class="App\Service\ClientProvider" autowire="true" autoconfigure="true">
      <call method="addClient">
        <argument>dummy</argument>
        <argument type="service" id="App\Service\DummyClient"/>
      </call>
    </service>
    <service id="App\Service\DummyClient" class="App\Service\DummyClient" autowire="true" autoconfigure="true"/>
    <service id="App\Service\DummyParser" class="App\Service\DummyParser" autowire="true" autoconfigure="true"/>
    <service id="App\Service\ParserProvider" class="App\Service\ParserProvider" autowire="true" autoconfigure="true">
      <call method="addParser">
        <argument>dummy</argument>
        <argument type="service" id="App\Service\DummyParser"/>
      </call>
    </service>
    <service id="controller_name_converter" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="kernel"/>
    </service>
    <service id="controller_resolver" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory" public="false"/>
    <service id="argument_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver" public="false">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="argument_resolver.request_attribute"/>
        <argument type="service" id="argument_resolver.request"/>
        <argument type="service" id="argument_resolver.session"/>
        <argument type="service" id="argument_resolver.service"/>
        <argument type="service" id="argument_resolver.default"/>
        <argument type="service" id="argument_resolver.variadic"/>
      </argument>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="100"/>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-50"/>
      <argument type="service" id=".service_locator.9_yeNH1"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-100"/>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-150"/>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="resolve_controller_name_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="controller_name_converter"/>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag" public="false">
      <argument type="service" id="service_container"/>
    </service>
    <service id="event_dispatcher" class="Symfony\Component\EventDispatcher\EventDispatcher" public="true">
      <tag name="container.hot_path"/>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="streamed_response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="resolve_controller_name_subscriber"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>24</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="maker.console_error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="maker.console_error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.controller.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.converter.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service" id="framework_extra_bundle.event.is_granted"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="argument_resolver"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper" public="false">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <argument type="tagged" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/var/www/html/var/cache/dev/srcApp_KernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer" public="true">
      <argument type="tagged" tag="kernel.cache_clearer"/>
    </service>
    <service id="kernel" public="true" synthetic="true"/>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem" public="true"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/var/www/html/src/Resources</argument>
      <argument type="collection">
        <argument>/var/www/html/src</argument>
      </argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner" public="false">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory" public="false">
      <argument type="tagged" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="messenger.transport.in_memory.factory" type="service" id="messenger.transport.in_memory.factory" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="messenger.transport.in_memory.factory">reset</argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer" public="false">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.UwRI0uT"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler" public="false">
      <argument type="service" id=".service_locator.gmwRZ3h"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer" public="false">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand" public="false">
      <tag name="console.command" command="about"/>
      <call method="setName">
        <argument>about</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand" public="false">
      <tag name="console.command" command="assets:install"/>
      <argument type="service" id="filesystem"/>
      <argument>/var/www/html</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand" public="false">
      <tag name="console.command" command="cache:clear"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand" public="false">
      <tag name="console.command" command="cache:pool:clear"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand" public="false">
      <tag name="console.command" command="cache:pool:prune"/>
      <argument type="iterator"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand" public="false">
      <tag name="console.command" command="cache:pool:delete"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand" public="false">
      <tag name="console.command" command="cache:pool:list"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand" public="false">
      <tag name="console.command" command="cache:warmup"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand" public="false">
      <tag name="console.command" command="debug:config"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand" public="false">
      <tag name="console.command" command="config:dump-reference"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand" public="false">
      <tag name="console.command" command="debug:container"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand" public="false">
      <tag name="console.command" command="debug:autowiring"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand" public="false">
      <tag name="console.command" command="debug:event-dispatcher"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
    </service>
    <service id="console.command.messenger_consume_messages" class="Symfony\Component\Messenger\Command\ConsumeMessagesCommand" public="false">
      <tag name="console.command" command="messenger:consume"/>
      <tag name="console.command" command="messenger:consume-messages"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.routable_message_bus"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="collection">
        <argument>async</argument>
      </argument>
      <argument type="service" id="messenger.retry_strategy_locator"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setCachePoolForRestartSignal">
        <argument type="service" id="cache.messenger.restart_workers_signal"/>
      </call>
      <call method="setName">
        <argument>messenger:consume</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>messenger:consume-messages</argument>
        </argument>
      </call>
    </service>
    <service id="console.command.messenger_setup_transports" class="Symfony\Component\Messenger\Command\SetupTransportsCommand" public="false">
      <tag name="console.command" command="messenger:setup-transports"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="collection">
        <argument>async</argument>
      </argument>
      <call method="setName">
        <argument>messenger:setup-transports</argument>
      </call>
    </service>
    <service id="console.command.messenger_debug" class="Symfony\Component\Messenger\Command\DebugCommand" public="false">
      <tag name="console.command" command="debug:messenger"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="collection">
          <argument key="App\Message\ImportMessage" type="collection">
            <argument type="collection">
              <argument>App\Handler\ImportHandler</argument>
              <argument type="collection"/>
            </argument>
          </argument>
        </argument>
      </argument>
      <call method="setName">
        <argument>debug:messenger</argument>
      </call>
    </service>
    <service id="console.command.messenger_stop_workers" class="Symfony\Component\Messenger\Command\StopWorkersCommand" public="false">
      <tag name="console.command" command="messenger:stop-workers"/>
      <argument type="service" id="cache.messenger.restart_workers_signal"/>
      <call method="setName">
        <argument>messenger:stop-workers</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand" public="false">
      <tag name="console.command" command="debug:router"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand" public="false">
      <tag name="console.command" command="router:match"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand" public="false">
      <tag name="console.command" command="lint:yaml"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <argument>AbnzTPLiea</argument>
      <argument>0</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.simple" class="Symfony\Component\Cache\Psr16Cache" public="false">
      <argument type="service" id="cache.app"/>
      <deprecated>The "Psr\SimpleCache\CacheInterface" / "%service_id%" service is deprecated since Symfony 4.3. Use "Symfony\Contracts\Cache\CacheInterface" / "cache.app" instead.</deprecated>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter" public="false">
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <argument>vq59C-hMoY</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>h3VmsACtf0</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>9BNmn5D2ed</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>D-XtS7ZYgB</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>0t1UOVrRN-</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.messenger.restart_workers_signal" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false">
      <tag name="cache.pool"/>
      <argument>n7MAYD47nK</argument>
      <argument>0</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine" class="Symfony\Component\Cache\Adapter\DoctrineAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/var/www/html/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller" public="false">
      <argument>null</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="false">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".1_NativeFileSessionHandler~DvV_kmW" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler" public="false">
      <argument>/var/www/html/var/cache/dev/sessions</argument>
    </service>
    <service id="session" class="Symfony\Component\HttpFoundation\Session\Session" public="true">
      <argument type="service" id="session.storage.native"/>
      <argument type="service" id="session.attribute_bag"/>
      <argument type="service" id="session.flash_bag"/>
    </service>
    <service id="session.storage.metadata_bag" class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag" public="false">
      <argument>_sf2_meta</argument>
      <argument>0</argument>
    </service>
    <service id="session.storage.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage" public="false">
      <argument>%session.storage.options%</argument>
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.storage.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage" public="false">
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.flash_bag" class="Symfony\Component\HttpFoundation\Session\Flash\FlashBag" public="false"/>
    <service id="session.attribute_bag" class="Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag" public="false"/>
    <service id="session.storage.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage" public="false">
      <argument>/var/www/html/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler" public="false">
      <argument type="service" id=".1_NativeFileSessionHandler~DvV_kmW"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.WPZmidW"/>
    </service>
    <service id="session.save_listener" class="Symfony\Component\HttpKernel\EventListener\SaveSessionListener" public="false">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.1. Use the "session_listener" service instead.</deprecated>
    </service>
    <service id="messenger.senders_locator" class="Symfony\Component\Messenger\Transport\Sender\SendersLocator" public="false">
      <argument type="collection">
        <argument key="App\Message\ImportMessage" type="collection">
          <argument>async</argument>
        </argument>
      </argument>
      <argument type="service" id=".service_locator.KK9uGgK"/>
    </service>
    <service id="messenger.middleware.send_message" class="Symfony\Component\Messenger\Middleware\SendMessageMiddleware" public="false">
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.senders_locator"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.transport.symfony_serializer" class="Symfony\Component\Messenger\Transport\Serialization\Serializer" public="false">
      <argument type="service" id="serializer"/>
      <argument>json</argument>
      <argument type="collection"/>
    </service>
    <service id="messenger.transport.native_php_serializer" class="Symfony\Component\Messenger\Transport\Serialization\PhpSerializer" public="false"/>
    <service id="messenger.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware" public="false" abstract="true">
      <tag name="monolog.logger" channel="messenger"/>
      <argument></argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware" public="false" abstract="true"/>
    <service id="messenger.middleware.dispatch_after_current_bus" class="Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware" public="false"/>
    <service id="messenger.middleware.validation" class="Symfony\Component\Messenger\Middleware\ValidationMiddleware" public="false">
      <argument type="service" id="validator"/>
    </service>
    <service id="messenger.middleware.failed_message_processing_middleware" class="Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware" public="false"/>
    <service id="messenger.middleware.traceable" class="Symfony\Component\Messenger\Middleware\TraceableMiddleware" public="false" abstract="true">
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="messenger.receiver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="async" type="service" id="messenger.transport.async"/>
        <argument key="messenger.transport.async" type="service" id="messenger.transport.async"/>
      </argument>
    </service>
    <service id="messenger.transport_factory" class="Symfony\Component\Messenger\Transport\TransportFactory" public="false">
      <argument type="tagged" tag="messenger.transport_factory"/>
    </service>
    <service id="messenger.transport.amqp.factory" class="Symfony\Component\Messenger\Transport\AmqpExt\AmqpTransportFactory" public="false">
      <tag name="messenger.transport_factory"/>
    </service>
    <service id="messenger.transport.redis.factory" class="Symfony\Component\Messenger\Transport\RedisExt\RedisTransportFactory" public="false">
      <tag name="messenger.transport_factory"/>
    </service>
    <service id="messenger.transport.sync.factory" class="Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory" public="false">
      <tag name="messenger.transport_factory"/>
      <argument type="service" id="messenger.routable_message_bus"/>
    </service>
    <service id="messenger.transport.in_memory.factory" class="Symfony\Component\Messenger\Transport\InMemoryTransportFactory" public="false">
      <tag name="messenger.transport_factory"/>
      <tag name="kernel.reset" method="reset"/>
    </service>
    <service id="messenger.retry_strategy_locator" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="async" type="service" id="messenger.retry.multiplier_retry_strategy.async"/>
      </argument>
    </service>
    <service id="messenger.retry.abstract_multiplier_retry_strategy" class="Symfony\Component\Messenger\Retry\MultiplierRetryStrategy" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="messenger.routable_message_bus" class="Symfony\Component\Messenger\RoutableMessageBus" public="false">
      <argument type="service" id=".service_locator.CZEXAXI"/>
      <argument type="service" id="messenger.bus.default"/>
    </service>
    <service id="messenger.bus.default" class="Symfony\Component\Messenger\MessageBus">
      <tag name="messenger.bus"/>
      <argument type="iterator">
        <argument type="service" id="messenger.bus.default.middleware.add_bus_name_stamp_middleware"/>
        <argument type="service" id="messenger.middleware.dispatch_after_current_bus"/>
        <argument type="service" id="messenger.middleware.failed_message_processing_middleware"/>
        <argument type="service" id="messenger.middleware.send_message"/>
        <argument type="service" id="messenger.bus.default.middleware.handle_message"/>
      </argument>
    </service>
    <service id="messenger.transport.async" class="Symfony\Component\Messenger\Transport\TransportInterface">
      <tag name="messenger.receiver" alias="async"/>
      <argument>%env(MESSENGER_TRANSPORT_DSN)%</argument>
      <argument type="collection"/>
      <argument type="service" id="messenger.transport.native_php_serializer"/>
      <factory service="messenger.transport_factory" method="createTransport"/>
    </service>
    <service id="messenger.retry.multiplier_retry_strategy.async" class="Symfony\Component\Messenger\Retry\MultiplierRetryStrategy" public="false">
      <argument>2</argument>
      <argument>1000</argument>
      <argument>2</argument>
      <argument>0</argument>
    </service>
    <service id=".service_locator.KK9uGgK" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="async" type="service" id="messenger.transport.async"/>
      </argument>
    </service>
    <service id=".1_PhpArrayAdapter~IZNQuRE" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/var/www/html/var/cache/dev/validation.php</argument>
      <argument type="service" id="cache.validator"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="validator" class="Symfony\Component\Validator\Validator\ValidatorInterface" public="true">
      <factory service="validator.builder" method="getValidator"/>
    </service>
    <service id="validator.builder" class="Symfony\Component\Validator\ValidatorBuilderInterface" public="false">
      <call method="setConstraintValidatorFactory">
        <argument type="service" id="validator.validator_factory"/>
      </call>
      <call method="setTranslationDomain">
        <argument>validators</argument>
      </call>
      <call method="enableAnnotationMapping">
        <argument type="service" id="annotations.cached_reader"/>
      </call>
      <call method="addMethodMapping">
        <argument>loadValidatorMetadata</argument>
      </call>
      <call method="addObjectInitializers">
        <argument type="collection"/>
      </call>
      <factory class="Symfony\Component\Validator\Validation" method="createValidatorBuilder"/>
    </service>
    <service id="validator.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="validator.builder"/>
      <argument>/var/www/html/var/cache/dev/validation.php</argument>
    </service>
    <service id="validator.mapping.cache.symfony" class="Symfony\Component\Validator\Mapping\Cache\Psr6Cache" public="false">
      <argument type="service" id=".1_PhpArrayAdapter~IZNQuRE"/>
    </service>
    <service id="validator.validator_factory" class="Symfony\Component\Validator\ContainerConstraintValidatorFactory" public="false">
      <argument type="service" id=".service_locator.XkWnR1f"/>
    </service>
    <service id="validator.expression" class="Symfony\Component\Validator\Constraints\ExpressionValidator" public="false">
      <tag name="validator.constraint_validator" alias="validator.expression"/>
    </service>
    <service id="validator.email" class="Symfony\Component\Validator\Constraints\EmailValidator" public="false">
      <tag name="validator.constraint_validator" alias="Symfony\Component\Validator\Constraints\EmailValidator"/>
      <argument>html5</argument>
    </service>
    <service id="validator.not_compromised_password" class="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" public="false">
      <tag name="validator.constraint_validator" alias="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator"/>
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument type="service" id="debug.file_link_formatter"/>
      <argument>true</argument>
      <argument>UTF-8</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" public="false">
      <argument>null</argument>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver" public="false">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.service"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.file"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.service" class="Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="routing.resolver"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router" public="false">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.MAfdX1A.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/html/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" public="false">
      <argument></argument>
      <argument>GET</argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.m8PwGkX.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/var/www/html</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="routing.loader.annotation" class="Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="routing.loader.annotation.directory" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.annotation.file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id=".2_PhpArrayAdapter~XoAJ6ol" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/var/www/html/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id=".1_ArrayCache~XoAJ6ol" class="Doctrine\Common\Cache\ArrayCache" public="false"/>
    <service id="annotations.reader" class="Doctrine\Common\Annotations\AnnotationReader" public="false">
      <call method="addGlobalIgnoredName">
        <argument>required</argument>
        <argument type="service" id="annotations.dummy_registry"/>
      </call>
    </service>
    <service id="annotations.dummy_registry" class="Doctrine\Common\Annotations\AnnotationRegistry" public="false">
      <call method="registerUniqueLoader">
        <argument>class_exists</argument>
      </call>
    </service>
    <service id="annotations.cached_reader" class="Doctrine\Common\Annotations\CachedReader" public="false">
      <tag name="annotations.cached_reader"/>
      <argument type="service" id="annotations.reader"/>
      <argument type="service" id=".1_ArrayCache~XoAJ6ol"/>
      <argument>true</argument>
      <property name="cacheProviderBackup" type="service" id="annotations.cache"/>
    </service>
    <service id="annotations.filesystem_cache" class="Doctrine\Common\Cache\FilesystemCache" public="false">
      <argument></argument>
    </service>
    <service id="annotations.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="annotations.reader"/>
      <argument>/var/www/html/var/cache/dev/annotations.php</argument>
      <argument>#^Symfony\\(?:Component\\HttpKernel\\|Bundle\\FrameworkBundle\\Controller\\(?!AbstractController$|Controller$))#</argument>
      <argument>true</argument>
    </service>
    <service id="annotations.cache" class="Symfony\Component\Cache\DoctrineProvider" public="false">
      <argument type="service" id=".2_PhpArrayAdapter~XoAJ6ol"/>
    </service>
    <service id="serializer" class="Symfony\Component\Serializer\Serializer" public="true">
      <argument type="collection">
        <argument type="service" id="serializer.normalizer.json_serializable"/>
        <argument type="service" id="serializer.normalizer.datetime"/>
        <argument type="service" id="serializer.normalizer.constraint_violation_list"/>
        <argument type="service" id="serializer.normalizer.dateinterval"/>
        <argument type="service" id="serializer.normalizer.data_uri"/>
        <argument type="service" id="serializer.denormalizer.array"/>
      </argument>
      <argument type="collection">
        <argument type="service" id="serializer.encoder.xml"/>
        <argument type="service" id="serializer.encoder.json"/>
        <argument type="service" id="serializer.encoder.yaml"/>
        <argument type="service" id="serializer.encoder.csv"/>
      </argument>
    </service>
    <service id="serializer.mapping.class_discriminator_resolver" class="Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata" public="false">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="serializer.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-915"/>
      <argument type="collection"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
    </service>
    <service id="serializer.normalizer.dateinterval" class="Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.data_uri" class="Symfony\Component\Serializer\Normalizer\DataUriNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-920"/>
      <argument type="service" id="mime_types" on-invalid="null"/>
    </service>
    <service id="serializer.normalizer.datetime" class="Symfony\Component\Serializer\Normalizer\DateTimeNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-910"/>
    </service>
    <service id="serializer.normalizer.json_serializable" class="Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-900"/>
    </service>
    <service id="serializer.denormalizer.array" class="Symfony\Component\Serializer\Normalizer\ArrayDenormalizer" public="false">
      <tag name="serializer.normalizer" priority="-990"/>
    </service>
    <service id="serializer.mapping.chain_loader" class="Symfony\Component\Serializer\Mapping\Loader\LoaderChain" public="false">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader" public="false">
            <argument type="service" id="annotations.cached_reader"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="serializer.mapping.class_metadata_factory" class="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory" public="false">
      <argument type="service" id="serializer.mapping.chain_loader"/>
      <argument>null</argument>
    </service>
    <service id="serializer.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader" public="false">
            <argument type="service" id="annotations.cached_reader"/>
          </service>
        </argument>
      </argument>
      <argument>/var/www/html/var/cache/dev/serialization.php</argument>
    </service>
    <service id="serializer.mapping.cache.symfony" class="Psr\Cache\CacheItemPoolInterface" public="false">
      <argument>/var/www/html/var/cache/dev/serialization.php</argument>
      <argument type="service" id="cache.serializer"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="serializer.encoder.xml" class="Symfony\Component\Serializer\Encoder\XmlEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.json" class="Symfony\Component\Serializer\Encoder\JsonEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.yaml" class="Symfony\Component\Serializer\Encoder\YamlEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.csv" class="Symfony\Component\Serializer\Encoder\CsvEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.name_converter.camel_case_to_snake_case" class="Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter" public="false"/>
    <service id="serializer.name_converter.metadata_aware" class="Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter" public="false">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="property_info.serializer_extractor" class="Symfony\Component\PropertyInfo\Extractor\SerializerExtractor" public="false">
      <tag name="property_info.list_extractor" priority="-999"/>
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="mime_types" class="Symfony\Component\Mime\MimeTypes" public="false">
      <call method="setDefault">
        <argument type="service" id="mime_types"/>
      </call>
    </service>
    <service id="maker.file_manager" class="Symfony\Bundle\MakerBundle\FileManager" public="false">
      <argument type="service" id="filesystem"/>
      <argument type="service" id="maker.autoloader_util"/>
      <argument>/var/www/html</argument>
    </service>
    <service id="maker.autoloader_finder" class="Symfony\Bundle\MakerBundle\Util\ComposerAutoloaderFinder" public="false"/>
    <service id="maker.autoloader_util" class="Symfony\Bundle\MakerBundle\Util\AutoloaderUtil" public="false">
      <argument type="service" id="maker.autoloader_finder"/>
    </service>
    <service id="maker.event_registry" class="Symfony\Bundle\MakerBundle\EventRegistry" public="false">
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="maker.console_error_listener" class="Symfony\Bundle\MakerBundle\Event\ConsoleErrorSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="maker.doctrine_helper" class="Symfony\Bundle\MakerBundle\Doctrine\DoctrineHelper" public="false">
      <argument>App\Entity</argument>
      <argument>null</argument>
    </service>
    <service id="maker.auto_command.abstract" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false" abstract="true">
      <argument></argument>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.generator" class="Symfony\Bundle\MakerBundle\Generator" public="false">
      <argument type="service" id="maker.file_manager"/>
      <argument>App</argument>
    </service>
    <service id="maker.entity_class_generator" class="Symfony\Bundle\MakerBundle\Doctrine\EntityClassGenerator" public="false">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.user_class_builder" class="Symfony\Bundle\MakerBundle\Security\UserClassBuilder" public="false"/>
    <service id="maker.security_config_updater" class="Symfony\Bundle\MakerBundle\Security\SecurityConfigUpdater" public="false"/>
    <service id="maker.renderer.form_type_renderer" class="Symfony\Bundle\MakerBundle\Renderer\FormTypeRenderer" public="false">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.maker.make_authenticator" class="Symfony\Bundle\MakerBundle\Maker\MakeAuthenticator" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.maker.make_command" class="Symfony\Bundle\MakerBundle\Maker\MakeCommand" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeController" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_crud" class="Symfony\Bundle\MakerBundle\Maker\MakeCrud" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_entity" class="Symfony\Bundle\MakerBundle\Maker\MakeEntity" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument>/var/www/html</argument>
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.maker.make_fixtures" class="Symfony\Bundle\MakerBundle\Maker\MakeFixtures" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form" class="Symfony\Bundle\MakerBundle\Maker\MakeForm" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_functional_test" class="Symfony\Bundle\MakerBundle\Maker\MakeFunctionalTest" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_registration_form" class="Symfony\Bundle\MakerBundle\Maker\MakeRegistrationForm" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
      <argument type="service" id="router.default"/>
    </service>
    <service id="maker.maker.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerEncoder" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerNormalizer" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_subscriber" class="Symfony\Bundle\MakerBundle\Maker\MakeSubscriber" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
    </service>
    <service id="maker.maker.make_twig_extension" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigExtension" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_unit_test" class="Symfony\Bundle\MakerBundle\Maker\MakeUnitTest" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_validator" class="Symfony\Bundle\MakerBundle\Maker\MakeValidator" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_voter" class="Symfony\Bundle\MakerBundle\Maker\MakeVoter" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_user" class="Symfony\Bundle\MakerBundle\Maker\MakeUser" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.user_class_builder"/>
      <argument type="service" id="maker.security_config_updater"/>
    </service>
    <service id="maker.maker.make_migration" class="Symfony\Bundle\MakerBundle\Maker\MakeMigration" public="false">
      <tag name="maker.command"/>
      <argument>/var/www/html</argument>
    </service>
    <service id="aws_sdk" class="Aws\Sdk">
      <argument type="collection">
        <argument key="ua_append" type="collection">
          <argument>Symfony/4.3.1</argument>
          <argument>SYMOD/2.0.1</argument>
        </argument>
      </argument>
    </service>
    <service id="aws.acmpca" class="Aws\ACMPCA\ACMPCAClient">
      <factory service="aws_sdk" method="createACMPCA"/>
    </service>
    <service id="aws.acm" class="Aws\Acm\AcmClient">
      <factory service="aws_sdk" method="createAcm"/>
    </service>
    <service id="aws.alexaforbusiness" class="Aws\AlexaForBusiness\AlexaForBusinessClient">
      <factory service="aws_sdk" method="createAlexaForBusiness"/>
    </service>
    <service id="aws.amplify" class="Aws\Amplify\AmplifyClient">
      <factory service="aws_sdk" method="createAmplify"/>
    </service>
    <service id="aws.apigateway" class="Aws\ApiGateway\ApiGatewayClient">
      <factory service="aws_sdk" method="createApiGateway"/>
    </service>
    <service id="aws.apigatewaymanagementapi" class="Aws\ApiGatewayManagementApi\ApiGatewayManagementApiClient">
      <factory service="aws_sdk" method="createApiGatewayManagementApi"/>
    </service>
    <service id="aws.apigatewayv2" class="Aws\ApiGatewayV2\ApiGatewayV2Client">
      <factory service="aws_sdk" method="createApiGatewayV2"/>
    </service>
    <service id="aws.applicationautoscaling" class="Aws\ApplicationAutoScaling\ApplicationAutoScalingClient">
      <factory service="aws_sdk" method="createApplicationAutoScaling"/>
    </service>
    <service id="aws.appmesh" class="Aws\AppMesh\AppMeshClient">
      <factory service="aws_sdk" method="createAppMesh"/>
    </service>
    <service id="aws.appstream" class="Aws\Appstream\AppstreamClient">
      <factory service="aws_sdk" method="createAppstream"/>
    </service>
    <service id="aws.appsync" class="Aws\AppSync\AppSyncClient">
      <factory service="aws_sdk" method="createAppSync"/>
    </service>
    <service id="aws.athena" class="Aws\Athena\AthenaClient">
      <factory service="aws_sdk" method="createAthena"/>
    </service>
    <service id="aws.autoscalingplans" class="Aws\AutoScalingPlans\AutoScalingPlansClient">
      <factory service="aws_sdk" method="createAutoScalingPlans"/>
    </service>
    <service id="aws.autoscaling" class="Aws\AutoScaling\AutoScalingClient">
      <factory service="aws_sdk" method="createAutoScaling"/>
    </service>
    <service id="aws.backup" class="Aws\Backup\BackupClient">
      <factory service="aws_sdk" method="createBackup"/>
    </service>
    <service id="aws.batch" class="Aws\Batch\BatchClient">
      <factory service="aws_sdk" method="createBatch"/>
    </service>
    <service id="aws.budgets" class="Aws\Budgets\BudgetsClient">
      <factory service="aws_sdk" method="createBudgets"/>
    </service>
    <service id="aws.costexplorer" class="Aws\CostExplorer\CostExplorerClient">
      <factory service="aws_sdk" method="createCostExplorer"/>
    </service>
    <service id="aws.chime" class="Aws\Chime\ChimeClient">
      <factory service="aws_sdk" method="createChime"/>
    </service>
    <service id="aws.cloud9" class="Aws\Cloud9\Cloud9Client">
      <factory service="aws_sdk" method="createCloud9"/>
    </service>
    <service id="aws.clouddirectory" class="Aws\CloudDirectory\CloudDirectoryClient">
      <factory service="aws_sdk" method="createCloudDirectory"/>
    </service>
    <service id="aws.cloudformation" class="Aws\CloudFormation\CloudFormationClient">
      <factory service="aws_sdk" method="createCloudFormation"/>
    </service>
    <service id="aws.cloudfront" class="Aws\CloudFront\CloudFrontClient">
      <factory service="aws_sdk" method="createCloudFront"/>
    </service>
    <service id="aws.cloudhsm" class="Aws\CloudHsm\CloudHsmClient">
      <factory service="aws_sdk" method="createCloudHsm"/>
    </service>
    <service id="aws.cloudhsmv2" class="Aws\CloudHSMV2\CloudHSMV2Client">
      <factory service="aws_sdk" method="createCloudHSMV2"/>
    </service>
    <service id="aws.cloudsearch" class="Aws\CloudSearch\CloudSearchClient">
      <factory service="aws_sdk" method="createCloudSearch"/>
    </service>
    <service id="aws.cloudsearchdomain" class="Aws\CloudSearchDomain\CloudSearchDomainClient">
      <factory service="aws_sdk" method="createCloudSearchDomain"/>
    </service>
    <service id="aws.cloudtrail" class="Aws\CloudTrail\CloudTrailClient">
      <factory service="aws_sdk" method="createCloudTrail"/>
    </service>
    <service id="aws.codebuild" class="Aws\CodeBuild\CodeBuildClient">
      <factory service="aws_sdk" method="createCodeBuild"/>
    </service>
    <service id="aws.codecommit" class="Aws\CodeCommit\CodeCommitClient">
      <factory service="aws_sdk" method="createCodeCommit"/>
    </service>
    <service id="aws.codedeploy" class="Aws\CodeDeploy\CodeDeployClient">
      <factory service="aws_sdk" method="createCodeDeploy"/>
    </service>
    <service id="aws.codepipeline" class="Aws\CodePipeline\CodePipelineClient">
      <factory service="aws_sdk" method="createCodePipeline"/>
    </service>
    <service id="aws.codestar" class="Aws\CodeStar\CodeStarClient">
      <factory service="aws_sdk" method="createCodeStar"/>
    </service>
    <service id="aws.cognitoidentity" class="Aws\CognitoIdentity\CognitoIdentityClient">
      <factory service="aws_sdk" method="createCognitoIdentity"/>
    </service>
    <service id="aws.cognitoidentityprovider" class="Aws\CognitoIdentityProvider\CognitoIdentityProviderClient">
      <factory service="aws_sdk" method="createCognitoIdentityProvider"/>
    </service>
    <service id="aws.cognitosync" class="Aws\CognitoSync\CognitoSyncClient">
      <factory service="aws_sdk" method="createCognitoSync"/>
    </service>
    <service id="aws.comprehend" class="Aws\Comprehend\ComprehendClient">
      <factory service="aws_sdk" method="createComprehend"/>
    </service>
    <service id="aws.comprehendmedical" class="Aws\ComprehendMedical\ComprehendMedicalClient">
      <factory service="aws_sdk" method="createComprehendMedical"/>
    </service>
    <service id="aws.configservice" class="Aws\ConfigService\ConfigServiceClient">
      <factory service="aws_sdk" method="createConfigService"/>
    </service>
    <service id="aws.connect" class="Aws\Connect\ConnectClient">
      <factory service="aws_sdk" method="createConnect"/>
    </service>
    <service id="aws.costandusagereportservice" class="Aws\CostandUsageReportService\CostandUsageReportServiceClient">
      <factory service="aws_sdk" method="createCostandUsageReportService"/>
    </service>
    <service id="aws.iotdataplane" class="Aws\IotDataPlane\IotDataPlaneClient">
      <factory service="aws_sdk" method="createIotDataPlane"/>
    </service>
    <service id="aws.datapipeline" class="Aws\DataPipeline\DataPipelineClient">
      <factory service="aws_sdk" method="createDataPipeline"/>
    </service>
    <service id="aws.datasync" class="Aws\DataSync\DataSyncClient">
      <factory service="aws_sdk" method="createDataSync"/>
    </service>
    <service id="aws.dax" class="Aws\DAX\DAXClient">
      <factory service="aws_sdk" method="createDAX"/>
    </service>
    <service id="aws.devicefarm" class="Aws\DeviceFarm\DeviceFarmClient">
      <factory service="aws_sdk" method="createDeviceFarm"/>
    </service>
    <service id="aws.directconnect" class="Aws\DirectConnect\DirectConnectClient">
      <factory service="aws_sdk" method="createDirectConnect"/>
    </service>
    <service id="aws.applicationdiscoveryservice" class="Aws\ApplicationDiscoveryService\ApplicationDiscoveryServiceClient">
      <factory service="aws_sdk" method="createApplicationDiscoveryService"/>
    </service>
    <service id="aws.dlm" class="Aws\DLM\DLMClient">
      <factory service="aws_sdk" method="createDLM"/>
    </service>
    <service id="aws.databasemigrationservice" class="Aws\DatabaseMigrationService\DatabaseMigrationServiceClient">
      <factory service="aws_sdk" method="createDatabaseMigrationService"/>
    </service>
    <service id="aws.docdb" class="Aws\DocDB\DocDBClient">
      <factory service="aws_sdk" method="createDocDB"/>
    </service>
    <service id="aws.directoryservice" class="Aws\DirectoryService\DirectoryServiceClient">
      <factory service="aws_sdk" method="createDirectoryService"/>
    </service>
    <service id="aws.dynamodb" class="Aws\DynamoDb\DynamoDbClient">
      <factory service="aws_sdk" method="createDynamoDb"/>
    </service>
    <service id="aws.ec2" class="Aws\Ec2\Ec2Client">
      <factory service="aws_sdk" method="createEc2"/>
    </service>
    <service id="aws.ecr" class="Aws\Ecr\EcrClient">
      <factory service="aws_sdk" method="createEcr"/>
    </service>
    <service id="aws.ecs" class="Aws\Ecs\EcsClient">
      <factory service="aws_sdk" method="createEcs"/>
    </service>
    <service id="aws.eks" class="Aws\EKS\EKSClient">
      <factory service="aws_sdk" method="createEKS"/>
    </service>
    <service id="aws.elasticache" class="Aws\ElastiCache\ElastiCacheClient">
      <factory service="aws_sdk" method="createElastiCache"/>
    </service>
    <service id="aws.elasticbeanstalk" class="Aws\ElasticBeanstalk\ElasticBeanstalkClient">
      <factory service="aws_sdk" method="createElasticBeanstalk"/>
    </service>
    <service id="aws.efs" class="Aws\Efs\EfsClient">
      <factory service="aws_sdk" method="createEfs"/>
    </service>
    <service id="aws.elasticloadbalancing" class="Aws\ElasticLoadBalancing\ElasticLoadBalancingClient">
      <factory service="aws_sdk" method="createElasticLoadBalancing"/>
    </service>
    <service id="aws.elasticloadbalancingv2" class="Aws\ElasticLoadBalancingV2\ElasticLoadBalancingV2Client">
      <factory service="aws_sdk" method="createElasticLoadBalancingV2"/>
    </service>
    <service id="aws.emr" class="Aws\Emr\EmrClient">
      <factory service="aws_sdk" method="createEmr"/>
    </service>
    <service id="aws.elastictranscoder" class="Aws\ElasticTranscoder\ElasticTranscoderClient">
      <factory service="aws_sdk" method="createElasticTranscoder"/>
    </service>
    <service id="aws.ses" class="Aws\Ses\SesClient">
      <factory service="aws_sdk" method="createSes"/>
    </service>
    <service id="aws.marketplaceentitlementservice" class="Aws\MarketplaceEntitlementService\MarketplaceEntitlementServiceClient">
      <factory service="aws_sdk" method="createMarketplaceEntitlementService"/>
    </service>
    <service id="aws.elasticsearchservice" class="Aws\ElasticsearchService\ElasticsearchServiceClient">
      <factory service="aws_sdk" method="createElasticsearchService"/>
    </service>
    <service id="aws.cloudwatchevents" class="Aws\CloudWatchEvents\CloudWatchEventsClient">
      <factory service="aws_sdk" method="createCloudWatchEvents"/>
    </service>
    <service id="aws.firehose" class="Aws\Firehose\FirehoseClient">
      <factory service="aws_sdk" method="createFirehose"/>
    </service>
    <service id="aws.fms" class="Aws\FMS\FMSClient">
      <factory service="aws_sdk" method="createFMS"/>
    </service>
    <service id="aws.fsx" class="Aws\FSx\FSxClient">
      <factory service="aws_sdk" method="createFSx"/>
    </service>
    <service id="aws.gamelift" class="Aws\GameLift\GameLiftClient">
      <factory service="aws_sdk" method="createGameLift"/>
    </service>
    <service id="aws.glacier" class="Aws\Glacier\GlacierClient">
      <factory service="aws_sdk" method="createGlacier"/>
    </service>
    <service id="aws.globalaccelerator" class="Aws\GlobalAccelerator\GlobalAcceleratorClient">
      <factory service="aws_sdk" method="createGlobalAccelerator"/>
    </service>
    <service id="aws.glue" class="Aws\Glue\GlueClient">
      <factory service="aws_sdk" method="createGlue"/>
    </service>
    <service id="aws.greengrass" class="Aws\Greengrass\GreengrassClient">
      <factory service="aws_sdk" method="createGreengrass"/>
    </service>
    <service id="aws.groundstation" class="Aws\GroundStation\GroundStationClient">
      <factory service="aws_sdk" method="createGroundStation"/>
    </service>
    <service id="aws.guardduty" class="Aws\GuardDuty\GuardDutyClient">
      <factory service="aws_sdk" method="createGuardDuty"/>
    </service>
    <service id="aws.health" class="Aws\Health\HealthClient">
      <factory service="aws_sdk" method="createHealth"/>
    </service>
    <service id="aws.iam" class="Aws\Iam\IamClient">
      <factory service="aws_sdk" method="createIam"/>
    </service>
    <service id="aws.importexport" class="Aws\ImportExport\ImportExportClient">
      <factory service="aws_sdk" method="createImportExport"/>
    </service>
    <service id="aws.inspector" class="Aws\Inspector\InspectorClient">
      <factory service="aws_sdk" method="createInspector"/>
    </service>
    <service id="aws.iotjobsdataplane" class="Aws\IoTJobsDataPlane\IoTJobsDataPlaneClient">
      <factory service="aws_sdk" method="createIoTJobsDataPlane"/>
    </service>
    <service id="aws.iot" class="Aws\Iot\IotClient">
      <factory service="aws_sdk" method="createIot"/>
    </service>
    <service id="aws.iot1clickdevicesservice" class="Aws\IoT1ClickDevicesService\IoT1ClickDevicesServiceClient">
      <factory service="aws_sdk" method="createIoT1ClickDevicesService"/>
    </service>
    <service id="aws.iot1clickprojects" class="Aws\IoT1ClickProjects\IoT1ClickProjectsClient">
      <factory service="aws_sdk" method="createIoT1ClickProjects"/>
    </service>
    <service id="aws.iotanalytics" class="Aws\IoTAnalytics\IoTAnalyticsClient">
      <factory service="aws_sdk" method="createIoTAnalytics"/>
    </service>
    <service id="aws.ioteventsdata" class="Aws\IoTEventsData\IoTEventsDataClient">
      <factory service="aws_sdk" method="createIoTEventsData"/>
    </service>
    <service id="aws.iotevents" class="Aws\IoTEvents\IoTEventsClient">
      <factory service="aws_sdk" method="createIoTEvents"/>
    </service>
    <service id="aws.iotthingsgraph" class="Aws\IoTThingsGraph\IoTThingsGraphClient">
      <factory service="aws_sdk" method="createIoTThingsGraph"/>
    </service>
    <service id="aws.kafka" class="Aws\Kafka\KafkaClient">
      <factory service="aws_sdk" method="createKafka"/>
    </service>
    <service id="aws.kinesisvideoarchivedmedia" class="Aws\KinesisVideoArchivedMedia\KinesisVideoArchivedMediaClient">
      <factory service="aws_sdk" method="createKinesisVideoArchivedMedia"/>
    </service>
    <service id="aws.kinesisvideomedia" class="Aws\KinesisVideoMedia\KinesisVideoMediaClient">
      <factory service="aws_sdk" method="createKinesisVideoMedia"/>
    </service>
    <service id="aws.kinesis" class="Aws\Kinesis\KinesisClient">
      <factory service="aws_sdk" method="createKinesis"/>
    </service>
    <service id="aws.kinesisanalytics" class="Aws\KinesisAnalytics\KinesisAnalyticsClient">
      <factory service="aws_sdk" method="createKinesisAnalytics"/>
    </service>
    <service id="aws.kinesisanalyticsv2" class="Aws\KinesisAnalyticsV2\KinesisAnalyticsV2Client">
      <factory service="aws_sdk" method="createKinesisAnalyticsV2"/>
    </service>
    <service id="aws.kinesisvideo" class="Aws\KinesisVideo\KinesisVideoClient">
      <factory service="aws_sdk" method="createKinesisVideo"/>
    </service>
    <service id="aws.kms" class="Aws\Kms\KmsClient">
      <factory service="aws_sdk" method="createKms"/>
    </service>
    <service id="aws.lambda" class="Aws\Lambda\LambdaClient">
      <factory service="aws_sdk" method="createLambda"/>
    </service>
    <service id="aws.lexmodelbuildingservice" class="Aws\LexModelBuildingService\LexModelBuildingServiceClient">
      <factory service="aws_sdk" method="createLexModelBuildingService"/>
    </service>
    <service id="aws.licensemanager" class="Aws\LicenseManager\LicenseManagerClient">
      <factory service="aws_sdk" method="createLicenseManager"/>
    </service>
    <service id="aws.lightsail" class="Aws\Lightsail\LightsailClient">
      <factory service="aws_sdk" method="createLightsail"/>
    </service>
    <service id="aws.cloudwatchlogs" class="Aws\CloudWatchLogs\CloudWatchLogsClient">
      <factory service="aws_sdk" method="createCloudWatchLogs"/>
    </service>
    <service id="aws.machinelearning" class="Aws\MachineLearning\MachineLearningClient">
      <factory service="aws_sdk" method="createMachineLearning"/>
    </service>
    <service id="aws.macie" class="Aws\Macie\MacieClient">
      <factory service="aws_sdk" method="createMacie"/>
    </service>
    <service id="aws.managedblockchain" class="Aws\ManagedBlockchain\ManagedBlockchainClient">
      <factory service="aws_sdk" method="createManagedBlockchain"/>
    </service>
    <service id="aws.marketplacecommerceanalytics" class="Aws\MarketplaceCommerceAnalytics\MarketplaceCommerceAnalyticsClient">
      <factory service="aws_sdk" method="createMarketplaceCommerceAnalytics"/>
    </service>
    <service id="aws.mediaconnect" class="Aws\MediaConnect\MediaConnectClient">
      <factory service="aws_sdk" method="createMediaConnect"/>
    </service>
    <service id="aws.mediaconvert" class="Aws\MediaConvert\MediaConvertClient">
      <factory service="aws_sdk" method="createMediaConvert"/>
    </service>
    <service id="aws.medialive" class="Aws\MediaLive\MediaLiveClient">
      <factory service="aws_sdk" method="createMediaLive"/>
    </service>
    <service id="aws.mediapackagevod" class="Aws\MediaPackageVod\MediaPackageVodClient">
      <factory service="aws_sdk" method="createMediaPackageVod"/>
    </service>
    <service id="aws.mediapackage" class="Aws\MediaPackage\MediaPackageClient">
      <factory service="aws_sdk" method="createMediaPackage"/>
    </service>
    <service id="aws.mediastoredata" class="Aws\MediaStoreData\MediaStoreDataClient">
      <factory service="aws_sdk" method="createMediaStoreData"/>
    </service>
    <service id="aws.mediastore" class="Aws\MediaStore\MediaStoreClient">
      <factory service="aws_sdk" method="createMediaStore"/>
    </service>
    <service id="aws.mediatailor" class="Aws\MediaTailor\MediaTailorClient">
      <factory service="aws_sdk" method="createMediaTailor"/>
    </service>
    <service id="aws.marketplacemetering" class="Aws\MarketplaceMetering\MarketplaceMeteringClient">
      <factory service="aws_sdk" method="createMarketplaceMetering"/>
    </service>
    <service id="aws.migrationhub" class="Aws\MigrationHub\MigrationHubClient">
      <factory service="aws_sdk" method="createMigrationHub"/>
    </service>
    <service id="aws.mobile" class="Aws\Mobile\MobileClient">
      <factory service="aws_sdk" method="createMobile"/>
    </service>
    <service id="aws.cloudwatch" class="Aws\CloudWatch\CloudWatchClient">
      <factory service="aws_sdk" method="createCloudWatch"/>
    </service>
    <service id="aws.mq" class="Aws\MQ\MQClient">
      <factory service="aws_sdk" method="createMQ"/>
    </service>
    <service id="aws.mturk" class="Aws\MTurk\MTurkClient">
      <factory service="aws_sdk" method="createMTurk"/>
    </service>
    <service id="aws.neptune" class="Aws\Neptune\NeptuneClient">
      <factory service="aws_sdk" method="createNeptune"/>
    </service>
    <service id="aws.opsworks" class="Aws\OpsWorks\OpsWorksClient">
      <factory service="aws_sdk" method="createOpsWorks"/>
    </service>
    <service id="aws.opsworkscm" class="Aws\OpsWorksCM\OpsWorksCMClient">
      <factory service="aws_sdk" method="createOpsWorksCM"/>
    </service>
    <service id="aws.organizations" class="Aws\Organizations\OrganizationsClient">
      <factory service="aws_sdk" method="createOrganizations"/>
    </service>
    <service id="aws.personalizeevents" class="Aws\PersonalizeEvents\PersonalizeEventsClient">
      <factory service="aws_sdk" method="createPersonalizeEvents"/>
    </service>
    <service id="aws.personalizeruntime" class="Aws\PersonalizeRuntime\PersonalizeRuntimeClient">
      <factory service="aws_sdk" method="createPersonalizeRuntime"/>
    </service>
    <service id="aws.personalize" class="Aws\Personalize\PersonalizeClient">
      <factory service="aws_sdk" method="createPersonalize"/>
    </service>
    <service id="aws.pi" class="Aws\PI\PIClient">
      <factory service="aws_sdk" method="createPI"/>
    </service>
    <service id="aws.pinpointemail" class="Aws\PinpointEmail\PinpointEmailClient">
      <factory service="aws_sdk" method="createPinpointEmail"/>
    </service>
    <service id="aws.pinpoint" class="Aws\Pinpoint\PinpointClient">
      <factory service="aws_sdk" method="createPinpoint"/>
    </service>
    <service id="aws.polly" class="Aws\Polly\PollyClient">
      <factory service="aws_sdk" method="createPolly"/>
    </service>
    <service id="aws.pricing" class="Aws\Pricing\PricingClient">
      <factory service="aws_sdk" method="createPricing"/>
    </service>
    <service id="aws.quicksight" class="Aws\QuickSight\QuickSightClient">
      <factory service="aws_sdk" method="createQuickSight"/>
    </service>
    <service id="aws.ram" class="Aws\RAM\RAMClient">
      <factory service="aws_sdk" method="createRAM"/>
    </service>
    <service id="aws.rdsdataservice" class="Aws\RDSDataService\RDSDataServiceClient">
      <factory service="aws_sdk" method="createRDSDataService"/>
    </service>
    <service id="aws.rds" class="Aws\Rds\RdsClient">
      <factory service="aws_sdk" method="createRds"/>
    </service>
    <service id="aws.redshift" class="Aws\Redshift\RedshiftClient">
      <factory service="aws_sdk" method="createRedshift"/>
    </service>
    <service id="aws.rekognition" class="Aws\Rekognition\RekognitionClient">
      <factory service="aws_sdk" method="createRekognition"/>
    </service>
    <service id="aws.resourcegroups" class="Aws\ResourceGroups\ResourceGroupsClient">
      <factory service="aws_sdk" method="createResourceGroups"/>
    </service>
    <service id="aws.resourcegroupstaggingapi" class="Aws\ResourceGroupsTaggingAPI\ResourceGroupsTaggingAPIClient">
      <factory service="aws_sdk" method="createResourceGroupsTaggingAPI"/>
    </service>
    <service id="aws.robomaker" class="Aws\RoboMaker\RoboMakerClient">
      <factory service="aws_sdk" method="createRoboMaker"/>
    </service>
    <service id="aws.route53" class="Aws\Route53\Route53Client">
      <factory service="aws_sdk" method="createRoute53"/>
    </service>
    <service id="aws.route53domains" class="Aws\Route53Domains\Route53DomainsClient">
      <factory service="aws_sdk" method="createRoute53Domains"/>
    </service>
    <service id="aws.route53resolver" class="Aws\Route53Resolver\Route53ResolverClient">
      <factory service="aws_sdk" method="createRoute53Resolver"/>
    </service>
    <service id="aws.lexruntimeservice" class="Aws\LexRuntimeService\LexRuntimeServiceClient">
      <factory service="aws_sdk" method="createLexRuntimeService"/>
    </service>
    <service id="aws.sagemakerruntime" class="Aws\SageMakerRuntime\SageMakerRuntimeClient">
      <factory service="aws_sdk" method="createSageMakerRuntime"/>
    </service>
    <service id="aws.s3" class="Aws\S3\S3Client">
      <factory service="aws_sdk" method="createS3"/>
    </service>
    <service id="aws.s3control" class="Aws\S3Control\S3ControlClient">
      <factory service="aws_sdk" method="createS3Control"/>
    </service>
    <service id="aws.sagemaker" class="Aws\SageMaker\SageMakerClient">
      <factory service="aws_sdk" method="createSageMaker"/>
    </service>
    <service id="aws.secretsmanager" class="Aws\SecretsManager\SecretsManagerClient">
      <factory service="aws_sdk" method="createSecretsManager"/>
    </service>
    <service id="aws.securityhub" class="Aws\SecurityHub\SecurityHubClient">
      <factory service="aws_sdk" method="createSecurityHub"/>
    </service>
    <service id="aws.serverlessapplicationrepository" class="Aws\ServerlessApplicationRepository\ServerlessApplicationRepositoryClient">
      <factory service="aws_sdk" method="createServerlessApplicationRepository"/>
    </service>
    <service id="aws.servicecatalog" class="Aws\ServiceCatalog\ServiceCatalogClient">
      <factory service="aws_sdk" method="createServiceCatalog"/>
    </service>
    <service id="aws.servicediscovery" class="Aws\ServiceDiscovery\ServiceDiscoveryClient">
      <factory service="aws_sdk" method="createServiceDiscovery"/>
    </service>
    <service id="aws.shield" class="Aws\Shield\ShieldClient">
      <factory service="aws_sdk" method="createShield"/>
    </service>
    <service id="aws.signer" class="Aws\signer\signerClient">
      <factory service="aws_sdk" method="createsigner"/>
    </service>
    <service id="aws.pinpointsmsvoice" class="Aws\PinpointSMSVoice\PinpointSMSVoiceClient">
      <factory service="aws_sdk" method="createPinpointSMSVoice"/>
    </service>
    <service id="aws.sms" class="Aws\Sms\SmsClient">
      <factory service="aws_sdk" method="createSms"/>
    </service>
    <service id="aws.snowball" class="Aws\SnowBall\SnowBallClient">
      <factory service="aws_sdk" method="createSnowBall"/>
    </service>
    <service id="aws.sns" class="Aws\Sns\SnsClient">
      <factory service="aws_sdk" method="createSns"/>
    </service>
    <service id="aws.sqs" class="Aws\Sqs\SqsClient">
      <factory service="aws_sdk" method="createSqs"/>
    </service>
    <service id="aws.ssm" class="Aws\Ssm\SsmClient">
      <factory service="aws_sdk" method="createSsm"/>
    </service>
    <service id="aws.sfn" class="Aws\Sfn\SfnClient">
      <factory service="aws_sdk" method="createSfn"/>
    </service>
    <service id="aws.storagegateway" class="Aws\StorageGateway\StorageGatewayClient">
      <factory service="aws_sdk" method="createStorageGateway"/>
    </service>
    <service id="aws.dynamodbstreams" class="Aws\DynamoDbStreams\DynamoDbStreamsClient">
      <factory service="aws_sdk" method="createDynamoDbStreams"/>
    </service>
    <service id="aws.sts" class="Aws\Sts\StsClient">
      <factory service="aws_sdk" method="createSts"/>
    </service>
    <service id="aws.support" class="Aws\Support\SupportClient">
      <factory service="aws_sdk" method="createSupport"/>
    </service>
    <service id="aws.swf" class="Aws\Swf\SwfClient">
      <factory service="aws_sdk" method="createSwf"/>
    </service>
    <service id="aws.textract" class="Aws\Textract\TextractClient">
      <factory service="aws_sdk" method="createTextract"/>
    </service>
    <service id="aws.transcribeservice" class="Aws\TranscribeService\TranscribeServiceClient">
      <factory service="aws_sdk" method="createTranscribeService"/>
    </service>
    <service id="aws.transfer" class="Aws\Transfer\TransferClient">
      <factory service="aws_sdk" method="createTransfer"/>
    </service>
    <service id="aws.translate" class="Aws\Translate\TranslateClient">
      <factory service="aws_sdk" method="createTranslate"/>
    </service>
    <service id="aws.wafregional" class="Aws\WafRegional\WafRegionalClient">
      <factory service="aws_sdk" method="createWafRegional"/>
    </service>
    <service id="aws.waf" class="Aws\Waf\WafClient">
      <factory service="aws_sdk" method="createWaf"/>
    </service>
    <service id="aws.workdocs" class="Aws\WorkDocs\WorkDocsClient">
      <factory service="aws_sdk" method="createWorkDocs"/>
    </service>
    <service id="aws.worklink" class="Aws\WorkLink\WorkLinkClient">
      <factory service="aws_sdk" method="createWorkLink"/>
    </service>
    <service id="aws.workmail" class="Aws\WorkMail\WorkMailClient">
      <factory service="aws_sdk" method="createWorkMail"/>
    </service>
    <service id="aws.workspaces" class="Aws\WorkSpaces\WorkSpacesClient">
      <factory service="aws_sdk" method="createWorkSpaces"/>
    </service>
    <service id="aws.xray" class="Aws\XRay\XRayClient">
      <factory service="aws_sdk" method="createXRay"/>
    </service>
    <service id="sensio_framework_extra.controller.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="sensio_framework_extra.converter.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="sensio_framework_extra.converter.manager"/>
      <argument>true</argument>
    </service>
    <service id="sensio_framework_extra.converter.manager" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager">
      <call method="add">
        <argument type="service" id="sensio_framework_extra.converter.doctrine.orm"/>
        <argument>0</argument>
        <argument>doctrine.orm</argument>
      </call>
      <call method="add">
        <argument type="service" id="framework_extra_bundle.date_time_param_converter"/>
        <argument>0</argument>
        <argument>datetime</argument>
      </call>
    </service>
    <service id="sensio_framework_extra.converter.doctrine.orm" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter" public="false">
      <tag name="request.param_converter" converter="doctrine.orm"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="framework_extra_bundle.date_time_param_converter" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter" public="false">
      <tag name="request.param_converter" converter="datetime"/>
    </service>
    <service id="sensio_framework_extra.view.guesser" class="Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser" public="false">
      <argument type="service" id="kernel"/>
    </service>
    <service id="sensio_framework_extra.cache.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="framework_extra_bundle.event.is_granted" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="framework_extra_bundle.argument_name_convertor"/>
      <argument>null</argument>
    </service>
    <service id="framework_extra_bundle.argument_name_convertor" class="Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter" public="false">
      <argument type="service" id="argument_metadata_factory"/>
    </service>
    <service id="Aws\S3\S3Client" class="Aws\S3\S3Client" autowire="true" autoconfigure="true">
      <argument type="collection">
        <argument key="endpoint">%env(resolve:AWS_S3_ENDPOINT)%</argument>
        <argument key="version">latest</argument>
        <argument key="region">%env(resolve:AWS_REGION)%</argument>
        <argument key="credentials" type="collection">
          <argument key="key">%env(resolve:AWS_KEY)%</argument>
          <argument key="secret">%env(resolve:AWS_SECRET)%</argument>
        </argument>
      </argument>
    </service>
    <service id="Aws\Sqs\SqsClient" class="Aws\Sqs\SqsClient" autowire="true" autoconfigure="true">
      <argument type="collection">
        <argument key="endpoint">%env(resolve:AWS_SQS_ENDPOINT)%</argument>
        <argument key="version">latest</argument>
        <argument key="region">%env(resolve:AWS_REGION)%</argument>
        <argument key="credentials" type="collection">
          <argument key="key">%env(resolve:AWS_KEY)%</argument>
          <argument key="secret">%env(resolve:AWS_SECRET)%</argument>
        </argument>
      </argument>
    </service>
    <service id=".instanceof.Symfony\Component\Console\Command\Command.0.App\Command\AwsInitCommand" class="App\Command\AwsInitCommand" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Command\AwsInitCommand" class="App\Command\AwsInitCommand" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Console\Command\Command.0.App\Command\ImportCommand" class="App\Command\ImportCommand" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Command\ImportCommand" class="App\Command\ImportCommand" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="maker.auto_command.make_auth" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:auth"/>
      <argument type="service" id="maker.maker.make_authenticator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:auth</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_command" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:command"/>
      <argument type="service" id="maker.maker.make_command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:command</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:controller"/>
      <argument type="service" id="maker.maker.make_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:controller</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_crud" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:crud"/>
      <argument type="service" id="maker.maker.make_crud"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:crud</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_entity" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:entity"/>
      <argument type="service" id="maker.maker.make_entity"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:entity</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_fixtures" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:fixtures"/>
      <argument type="service" id="maker.maker.make_fixtures"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:fixtures</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:form"/>
      <argument type="service" id="maker.maker.make_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:form</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_functional_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:functional-test"/>
      <argument type="service" id="maker.maker.make_functional_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:functional-test</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_registration_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:registration-form"/>
      <argument type="service" id="maker.maker.make_registration_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:registration-form</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:serializer:encoder"/>
      <argument type="service" id="maker.maker.make_serializer_encoder"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:serializer:encoder</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:serializer:normalizer"/>
      <argument type="service" id="maker.maker.make_serializer_normalizer"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:serializer:normalizer</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_subscriber" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:subscriber"/>
      <argument type="service" id="maker.maker.make_subscriber"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:subscriber</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_extension" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:twig-extension"/>
      <argument type="service" id="maker.maker.make_twig_extension"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:twig-extension</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_unit_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:unit-test"/>
      <argument type="service" id="maker.maker.make_unit_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:unit-test</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_validator" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:validator"/>
      <argument type="service" id="maker.maker.make_validator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:validator</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_voter" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:voter"/>
      <argument type="service" id="maker.maker.make_voter"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:voter</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_user" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:user"/>
      <argument type="service" id="maker.maker.make_user"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:user</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_migration" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:migration"/>
      <argument type="service" id="maker.maker.make_migration"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:migration</argument>
      </call>
    </service>
    <service id=".service_locator.9_yeNH1" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id=".service_locator.XkWnR1f" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Component\Validator\Constraints\EmailValidator" type="service" id="validator.email"/>
        <argument key="Symfony\Component\Validator\Constraints\ExpressionValidator" type="service" id="validator.expression"/>
        <argument key="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" type="service" id="validator.not_compromised_password"/>
        <argument key="validator.expression" type="service" id="validator.expression"/>
      </argument>
    </service>
    <service id=".service_locator.gmwRZ3h" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id="messenger.bus.default.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware" public="false">
      <argument>messenger.bus.default</argument>
    </service>
    <service id="messenger.bus.default.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware" public="false">
      <argument type="service" id="messenger.bus.default.messenger.handlers_locator"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id=".service_locator.CZEXAXI" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="service" id="messenger.bus.default"/>
      </argument>
    </service>
    <service id=".messenger.handler_descriptor.jzO5rOv" class="Symfony\Component\Messenger\Handler\HandlerDescriptor">
      <argument type="service" id="App\Handler\ImportHandler"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.bus.default.messenger.handlers_locator" class="Symfony\Component\Messenger\Handler\HandlersLocator">
      <argument type="collection">
        <argument key="App\Message\ImportMessage" type="iterator">
          <argument type="service" id=".messenger.handler_descriptor.jzO5rOv"/>
        </argument>
      </argument>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger" public="false"/>
    <service id=".service_locator.UwRI0uT" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.WPZmidW" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="initialized_session" type="service" id="session" on-invalid="ignore_uninitialized"/>
        <argument key="request_stack" type="service" id="request_stack"/>
        <argument key="session" type="service" id="session" on-invalid="ignore"/>
        <argument key="session_storage" type="service" id="session.storage.native" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.MAfdX1A" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.MAfdX1A.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.MAfdX1A" method="withContext"/>
    </service>
    <service id=".service_locator.m8PwGkX" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.m8PwGkX.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.m8PwGkX" method="withContext"/>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <argument type="service" id=".service_locator.tYch95O"/>
      <argument type="collection">
        <argument key="app:aws-init">App\Command\AwsInitCommand</argument>
        <argument key="app:import-tours">App\Command\ImportCommand</argument>
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="messenger:consume">console.command.messenger_consume_messages</argument>
        <argument key="messenger:consume-messages">console.command.messenger_consume_messages</argument>
        <argument key="messenger:setup-transports">console.command.messenger_setup_transports</argument>
        <argument key="debug:messenger">console.command.messenger_debug</argument>
        <argument key="messenger:stop-workers">console.command.messenger_stop_workers</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="make:auth">maker.auto_command.make_auth</argument>
        <argument key="make:command">maker.auto_command.make_command</argument>
        <argument key="make:controller">maker.auto_command.make_controller</argument>
        <argument key="make:crud">maker.auto_command.make_crud</argument>
        <argument key="make:entity">maker.auto_command.make_entity</argument>
        <argument key="make:fixtures">maker.auto_command.make_fixtures</argument>
        <argument key="make:form">maker.auto_command.make_form</argument>
        <argument key="make:functional-test">maker.auto_command.make_functional_test</argument>
        <argument key="make:registration-form">maker.auto_command.make_registration_form</argument>
        <argument key="make:serializer:encoder">maker.auto_command.make_serializer_encoder</argument>
        <argument key="make:serializer:normalizer">maker.auto_command.make_serializer_normalizer</argument>
        <argument key="make:subscriber">maker.auto_command.make_subscriber</argument>
        <argument key="make:twig-extension">maker.auto_command.make_twig_extension</argument>
        <argument key="make:unit-test">maker.auto_command.make_unit_test</argument>
        <argument key="make:validator">maker.auto_command.make_validator</argument>
        <argument key="make:voter">maker.auto_command.make_voter</argument>
        <argument key="make:user">maker.auto_command.make_user</argument>
        <argument key="make:migration">maker.auto_command.make_migration</argument>
      </argument>
    </service>
    <service id=".service_locator.tYch95O" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Command\AwsInitCommand" type="service" id="App\Command\AwsInitCommand"/>
        <argument key="App\Command\ImportCommand" type="service" id="App\Command\ImportCommand"/>
        <argument key="console.command.about" type="service" id="console.command.about"/>
        <argument key="console.command.assets_install" type="service" id="console.command.assets_install"/>
        <argument key="console.command.cache_clear" type="service" id="console.command.cache_clear"/>
        <argument key="console.command.cache_pool_clear" type="service" id="console.command.cache_pool_clear"/>
        <argument key="console.command.cache_pool_delete" type="service" id="console.command.cache_pool_delete"/>
        <argument key="console.command.cache_pool_list" type="service" id="console.command.cache_pool_list"/>
        <argument key="console.command.cache_pool_prune" type="service" id="console.command.cache_pool_prune"/>
        <argument key="console.command.cache_warmup" type="service" id="console.command.cache_warmup"/>
        <argument key="console.command.config_debug" type="service" id="console.command.config_debug"/>
        <argument key="console.command.config_dump_reference" type="service" id="console.command.config_dump_reference"/>
        <argument key="console.command.container_debug" type="service" id="console.command.container_debug"/>
        <argument key="console.command.debug_autowiring" type="service" id="console.command.debug_autowiring"/>
        <argument key="console.command.event_dispatcher_debug" type="service" id="console.command.event_dispatcher_debug"/>
        <argument key="console.command.messenger_consume_messages" type="service" id="console.command.messenger_consume_messages"/>
        <argument key="console.command.messenger_debug" type="service" id="console.command.messenger_debug"/>
        <argument key="console.command.messenger_setup_transports" type="service" id="console.command.messenger_setup_transports"/>
        <argument key="console.command.messenger_stop_workers" type="service" id="console.command.messenger_stop_workers"/>
        <argument key="console.command.router_debug" type="service" id="console.command.router_debug"/>
        <argument key="console.command.router_match" type="service" id="console.command.router_match"/>
        <argument key="console.command.yaml_lint" type="service" id="console.command.yaml_lint"/>
        <argument key="maker.auto_command.make_auth" type="service" id="maker.auto_command.make_auth"/>
        <argument key="maker.auto_command.make_command" type="service" id="maker.auto_command.make_command"/>
        <argument key="maker.auto_command.make_controller" type="service" id="maker.auto_command.make_controller"/>
        <argument key="maker.auto_command.make_crud" type="service" id="maker.auto_command.make_crud"/>
        <argument key="maker.auto_command.make_entity" type="service" id="maker.auto_command.make_entity"/>
        <argument key="maker.auto_command.make_fixtures" type="service" id="maker.auto_command.make_fixtures"/>
        <argument key="maker.auto_command.make_form" type="service" id="maker.auto_command.make_form"/>
        <argument key="maker.auto_command.make_functional_test" type="service" id="maker.auto_command.make_functional_test"/>
        <argument key="maker.auto_command.make_migration" type="service" id="maker.auto_command.make_migration"/>
        <argument key="maker.auto_command.make_registration_form" type="service" id="maker.auto_command.make_registration_form"/>
        <argument key="maker.auto_command.make_serializer_encoder" type="service" id="maker.auto_command.make_serializer_encoder"/>
        <argument key="maker.auto_command.make_serializer_normalizer" type="service" id="maker.auto_command.make_serializer_normalizer"/>
        <argument key="maker.auto_command.make_subscriber" type="service" id="maker.auto_command.make_subscriber"/>
        <argument key="maker.auto_command.make_twig_extension" type="service" id="maker.auto_command.make_twig_extension"/>
        <argument key="maker.auto_command.make_unit_test" type="service" id="maker.auto_command.make_unit_test"/>
        <argument key="maker.auto_command.make_user" type="service" id="maker.auto_command.make_user"/>
        <argument key="maker.auto_command.make_validator" type="service" id="maker.auto_command.make_validator"/>
        <argument key="maker.auto_command.make_voter" type="service" id="maker.auto_command.make_voter"/>
      </argument>
    </service>
    <service id="Psr\Container\ContainerInterface" alias="service_container" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface" alias="service_container" public="false"/>
    <service id="App\Interfaces\ClientInterface" alias="App\Service\DummyClient" public="false"/>
    <service id="App\Interfaces\ParserInterface" alias="App\Service\DummyParser" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher" public="false"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher" public="false"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel" public="false"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack" public="false"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper" public="false"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel" public="false"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem" public="false"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container" public="false"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app" public="false"/>
    <service id="Psr\SimpleCache\CacheInterface" alias="cache.app.simple" public="false"/>
    <service id="Symfony\Component\Cache\Adapter\AdapterInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" alias="session" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface" alias="session.storage.native" public="false"/>
    <service id="SessionHandlerInterface" alias="session.handler" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface" alias="session.flash_bag" public="false"/>
    <service id="session.storage.filesystem" alias="session.storage.mock_file" public="false"/>
    <service id="session.storage" alias="session.storage.native"/>
    <service id="Symfony\Component\Messenger\Transport\Serialization\SerializerInterface" alias="messenger.transport.native_php_serializer" public="false"/>
    <service id="message_bus" alias="messenger.bus.default" public="true">
      <deprecated>The "%alias_id%" service is deprecated, use the "messenger.default_bus" service instead.</deprecated>
    </service>
    <service id="messenger.default_bus" alias="messenger.bus.default" public="true"/>
    <service id="Symfony\Component\Messenger\MessageBusInterface" alias="messenger.bus.default"/>
    <service id="messenger.default_serializer" alias="messenger.transport.native_php_serializer"/>
    <service id="Symfony\Component\Validator\Validator\ValidatorInterface" alias="validator" public="false"/>
    <service id="validator.mapping.class_metadata_factory" alias="validator" public="false"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC" public="false"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX" public="false"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter" public="false"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context" public="false"/>
    <service id="annotation_reader" alias="annotations.cached_reader"/>
    <service id="Doctrine\Common\Annotations\Reader" alias="annotations.cached_reader" public="false"/>
    <service id="Symfony\Component\Serializer\SerializerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\NormalizerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\DenormalizerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Encoder\EncoderInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Encoder\DecoderInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Mapping\ClassDiscriminatorResolverInterface" alias="serializer.mapping.class_discriminator_resolver" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\ObjectNormalizer" alias="serializer.normalizer.object" public="false"/>
    <service id="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface" alias="serializer.mapping.class_metadata_factory" public="false"/>
    <service id="Aws\ACMPCA\ACMPCAClient" alias="aws.acmpca"/>
    <service id="Aws\Acm\AcmClient" alias="aws.acm"/>
    <service id="Aws\AlexaForBusiness\AlexaForBusinessClient" alias="aws.alexaforbusiness"/>
    <service id="Aws\Amplify\AmplifyClient" alias="aws.amplify"/>
    <service id="Aws\ApiGateway\ApiGatewayClient" alias="aws.apigateway"/>
    <service id="Aws\ApiGatewayManagementApi\ApiGatewayManagementApiClient" alias="aws.apigatewaymanagementapi"/>
    <service id="Aws\ApiGatewayV2\ApiGatewayV2Client" alias="aws.apigatewayv2"/>
    <service id="Aws\ApplicationAutoScaling\ApplicationAutoScalingClient" alias="aws.applicationautoscaling"/>
    <service id="Aws\AppMesh\AppMeshClient" alias="aws.appmesh"/>
    <service id="Aws\Appstream\AppstreamClient" alias="aws.appstream"/>
    <service id="Aws\AppSync\AppSyncClient" alias="aws.appsync"/>
    <service id="Aws\Athena\AthenaClient" alias="aws.athena"/>
    <service id="Aws\AutoScalingPlans\AutoScalingPlansClient" alias="aws.autoscalingplans"/>
    <service id="Aws\AutoScaling\AutoScalingClient" alias="aws.autoscaling"/>
    <service id="Aws\Backup\BackupClient" alias="aws.backup"/>
    <service id="Aws\Batch\BatchClient" alias="aws.batch"/>
    <service id="Aws\Budgets\BudgetsClient" alias="aws.budgets"/>
    <service id="Aws\CostExplorer\CostExplorerClient" alias="aws.costexplorer"/>
    <service id="Aws\Chime\ChimeClient" alias="aws.chime"/>
    <service id="Aws\Cloud9\Cloud9Client" alias="aws.cloud9"/>
    <service id="Aws\CloudDirectory\CloudDirectoryClient" alias="aws.clouddirectory"/>
    <service id="Aws\CloudFormation\CloudFormationClient" alias="aws.cloudformation"/>
    <service id="Aws\CloudFront\CloudFrontClient" alias="aws.cloudfront"/>
    <service id="Aws\CloudHsm\CloudHsmClient" alias="aws.cloudhsm"/>
    <service id="Aws\CloudHSMV2\CloudHSMV2Client" alias="aws.cloudhsmv2"/>
    <service id="Aws\CloudSearch\CloudSearchClient" alias="aws.cloudsearch"/>
    <service id="Aws\CloudSearchDomain\CloudSearchDomainClient" alias="aws.cloudsearchdomain"/>
    <service id="Aws\CloudTrail\CloudTrailClient" alias="aws.cloudtrail"/>
    <service id="Aws\CodeBuild\CodeBuildClient" alias="aws.codebuild"/>
    <service id="Aws\CodeCommit\CodeCommitClient" alias="aws.codecommit"/>
    <service id="Aws\CodeDeploy\CodeDeployClient" alias="aws.codedeploy"/>
    <service id="Aws\CodePipeline\CodePipelineClient" alias="aws.codepipeline"/>
    <service id="Aws\CodeStar\CodeStarClient" alias="aws.codestar"/>
    <service id="Aws\CognitoIdentity\CognitoIdentityClient" alias="aws.cognitoidentity"/>
    <service id="Aws\CognitoIdentityProvider\CognitoIdentityProviderClient" alias="aws.cognitoidentityprovider"/>
    <service id="Aws\CognitoSync\CognitoSyncClient" alias="aws.cognitosync"/>
    <service id="Aws\Comprehend\ComprehendClient" alias="aws.comprehend"/>
    <service id="Aws\ComprehendMedical\ComprehendMedicalClient" alias="aws.comprehendmedical"/>
    <service id="Aws\ConfigService\ConfigServiceClient" alias="aws.configservice"/>
    <service id="Aws\Connect\ConnectClient" alias="aws.connect"/>
    <service id="Aws\CostandUsageReportService\CostandUsageReportServiceClient" alias="aws.costandusagereportservice"/>
    <service id="Aws\IotDataPlane\IotDataPlaneClient" alias="aws.iotdataplane"/>
    <service id="Aws\DataPipeline\DataPipelineClient" alias="aws.datapipeline"/>
    <service id="Aws\DataSync\DataSyncClient" alias="aws.datasync"/>
    <service id="Aws\DAX\DAXClient" alias="aws.dax"/>
    <service id="Aws\DeviceFarm\DeviceFarmClient" alias="aws.devicefarm"/>
    <service id="Aws\DirectConnect\DirectConnectClient" alias="aws.directconnect"/>
    <service id="Aws\ApplicationDiscoveryService\ApplicationDiscoveryServiceClient" alias="aws.applicationdiscoveryservice"/>
    <service id="Aws\DLM\DLMClient" alias="aws.dlm"/>
    <service id="Aws\DatabaseMigrationService\DatabaseMigrationServiceClient" alias="aws.databasemigrationservice"/>
    <service id="Aws\DocDB\DocDBClient" alias="aws.docdb"/>
    <service id="Aws\DirectoryService\DirectoryServiceClient" alias="aws.directoryservice"/>
    <service id="Aws\DynamoDb\DynamoDbClient" alias="aws.dynamodb"/>
    <service id="Aws\Ec2\Ec2Client" alias="aws.ec2"/>
    <service id="Aws\Ecr\EcrClient" alias="aws.ecr"/>
    <service id="Aws\Ecs\EcsClient" alias="aws.ecs"/>
    <service id="Aws\EKS\EKSClient" alias="aws.eks"/>
    <service id="Aws\ElastiCache\ElastiCacheClient" alias="aws.elasticache"/>
    <service id="Aws\ElasticBeanstalk\ElasticBeanstalkClient" alias="aws.elasticbeanstalk"/>
    <service id="Aws\Efs\EfsClient" alias="aws.efs"/>
    <service id="Aws\ElasticLoadBalancing\ElasticLoadBalancingClient" alias="aws.elasticloadbalancing"/>
    <service id="Aws\ElasticLoadBalancingV2\ElasticLoadBalancingV2Client" alias="aws.elasticloadbalancingv2"/>
    <service id="Aws\Emr\EmrClient" alias="aws.emr"/>
    <service id="Aws\ElasticTranscoder\ElasticTranscoderClient" alias="aws.elastictranscoder"/>
    <service id="Aws\Ses\SesClient" alias="aws.ses"/>
    <service id="Aws\MarketplaceEntitlementService\MarketplaceEntitlementServiceClient" alias="aws.marketplaceentitlementservice"/>
    <service id="Aws\ElasticsearchService\ElasticsearchServiceClient" alias="aws.elasticsearchservice"/>
    <service id="Aws\CloudWatchEvents\CloudWatchEventsClient" alias="aws.cloudwatchevents"/>
    <service id="Aws\Firehose\FirehoseClient" alias="aws.firehose"/>
    <service id="Aws\FMS\FMSClient" alias="aws.fms"/>
    <service id="Aws\FSx\FSxClient" alias="aws.fsx"/>
    <service id="Aws\GameLift\GameLiftClient" alias="aws.gamelift"/>
    <service id="Aws\Glacier\GlacierClient" alias="aws.glacier"/>
    <service id="Aws\GlobalAccelerator\GlobalAcceleratorClient" alias="aws.globalaccelerator"/>
    <service id="Aws\Glue\GlueClient" alias="aws.glue"/>
    <service id="Aws\Greengrass\GreengrassClient" alias="aws.greengrass"/>
    <service id="Aws\GroundStation\GroundStationClient" alias="aws.groundstation"/>
    <service id="Aws\GuardDuty\GuardDutyClient" alias="aws.guardduty"/>
    <service id="Aws\Health\HealthClient" alias="aws.health"/>
    <service id="Aws\Iam\IamClient" alias="aws.iam"/>
    <service id="Aws\ImportExport\ImportExportClient" alias="aws.importexport"/>
    <service id="Aws\Inspector\InspectorClient" alias="aws.inspector"/>
    <service id="Aws\IoTJobsDataPlane\IoTJobsDataPlaneClient" alias="aws.iotjobsdataplane"/>
    <service id="Aws\Iot\IotClient" alias="aws.iot"/>
    <service id="Aws\IoT1ClickDevicesService\IoT1ClickDevicesServiceClient" alias="aws.iot1clickdevicesservice"/>
    <service id="Aws\IoT1ClickProjects\IoT1ClickProjectsClient" alias="aws.iot1clickprojects"/>
    <service id="Aws\IoTAnalytics\IoTAnalyticsClient" alias="aws.iotanalytics"/>
    <service id="Aws\IoTEventsData\IoTEventsDataClient" alias="aws.ioteventsdata"/>
    <service id="Aws\IoTEvents\IoTEventsClient" alias="aws.iotevents"/>
    <service id="Aws\IoTThingsGraph\IoTThingsGraphClient" alias="aws.iotthingsgraph"/>
    <service id="Aws\Kafka\KafkaClient" alias="aws.kafka"/>
    <service id="Aws\KinesisVideoArchivedMedia\KinesisVideoArchivedMediaClient" alias="aws.kinesisvideoarchivedmedia"/>
    <service id="Aws\KinesisVideoMedia\KinesisVideoMediaClient" alias="aws.kinesisvideomedia"/>
    <service id="Aws\Kinesis\KinesisClient" alias="aws.kinesis"/>
    <service id="Aws\KinesisAnalytics\KinesisAnalyticsClient" alias="aws.kinesisanalytics"/>
    <service id="Aws\KinesisAnalyticsV2\KinesisAnalyticsV2Client" alias="aws.kinesisanalyticsv2"/>
    <service id="Aws\KinesisVideo\KinesisVideoClient" alias="aws.kinesisvideo"/>
    <service id="Aws\Kms\KmsClient" alias="aws.kms"/>
    <service id="Aws\Lambda\LambdaClient" alias="aws.lambda"/>
    <service id="Aws\LexModelBuildingService\LexModelBuildingServiceClient" alias="aws.lexmodelbuildingservice"/>
    <service id="Aws\LicenseManager\LicenseManagerClient" alias="aws.licensemanager"/>
    <service id="Aws\Lightsail\LightsailClient" alias="aws.lightsail"/>
    <service id="Aws\CloudWatchLogs\CloudWatchLogsClient" alias="aws.cloudwatchlogs"/>
    <service id="Aws\MachineLearning\MachineLearningClient" alias="aws.machinelearning"/>
    <service id="Aws\Macie\MacieClient" alias="aws.macie"/>
    <service id="Aws\ManagedBlockchain\ManagedBlockchainClient" alias="aws.managedblockchain"/>
    <service id="Aws\MarketplaceCommerceAnalytics\MarketplaceCommerceAnalyticsClient" alias="aws.marketplacecommerceanalytics"/>
    <service id="Aws\MediaConnect\MediaConnectClient" alias="aws.mediaconnect"/>
    <service id="Aws\MediaConvert\MediaConvertClient" alias="aws.mediaconvert"/>
    <service id="Aws\MediaLive\MediaLiveClient" alias="aws.medialive"/>
    <service id="Aws\MediaPackageVod\MediaPackageVodClient" alias="aws.mediapackagevod"/>
    <service id="Aws\MediaPackage\MediaPackageClient" alias="aws.mediapackage"/>
    <service id="Aws\MediaStoreData\MediaStoreDataClient" alias="aws.mediastoredata"/>
    <service id="Aws\MediaStore\MediaStoreClient" alias="aws.mediastore"/>
    <service id="Aws\MediaTailor\MediaTailorClient" alias="aws.mediatailor"/>
    <service id="Aws\MarketplaceMetering\MarketplaceMeteringClient" alias="aws.marketplacemetering"/>
    <service id="Aws\MigrationHub\MigrationHubClient" alias="aws.migrationhub"/>
    <service id="Aws\Mobile\MobileClient" alias="aws.mobile"/>
    <service id="Aws\CloudWatch\CloudWatchClient" alias="aws.cloudwatch"/>
    <service id="Aws\MQ\MQClient" alias="aws.mq"/>
    <service id="Aws\MTurk\MTurkClient" alias="aws.mturk"/>
    <service id="Aws\Neptune\NeptuneClient" alias="aws.neptune"/>
    <service id="Aws\OpsWorks\OpsWorksClient" alias="aws.opsworks"/>
    <service id="Aws\OpsWorksCM\OpsWorksCMClient" alias="aws.opsworkscm"/>
    <service id="Aws\Organizations\OrganizationsClient" alias="aws.organizations"/>
    <service id="Aws\PersonalizeEvents\PersonalizeEventsClient" alias="aws.personalizeevents"/>
    <service id="Aws\PersonalizeRuntime\PersonalizeRuntimeClient" alias="aws.personalizeruntime"/>
    <service id="Aws\Personalize\PersonalizeClient" alias="aws.personalize"/>
    <service id="Aws\PI\PIClient" alias="aws.pi"/>
    <service id="Aws\PinpointEmail\PinpointEmailClient" alias="aws.pinpointemail"/>
    <service id="Aws\Pinpoint\PinpointClient" alias="aws.pinpoint"/>
    <service id="Aws\Polly\PollyClient" alias="aws.polly"/>
    <service id="Aws\Pricing\PricingClient" alias="aws.pricing"/>
    <service id="Aws\QuickSight\QuickSightClient" alias="aws.quicksight"/>
    <service id="Aws\RAM\RAMClient" alias="aws.ram"/>
    <service id="Aws\RDSDataService\RDSDataServiceClient" alias="aws.rdsdataservice"/>
    <service id="Aws\Rds\RdsClient" alias="aws.rds"/>
    <service id="Aws\Redshift\RedshiftClient" alias="aws.redshift"/>
    <service id="Aws\Rekognition\RekognitionClient" alias="aws.rekognition"/>
    <service id="Aws\ResourceGroups\ResourceGroupsClient" alias="aws.resourcegroups"/>
    <service id="Aws\ResourceGroupsTaggingAPI\ResourceGroupsTaggingAPIClient" alias="aws.resourcegroupstaggingapi"/>
    <service id="Aws\RoboMaker\RoboMakerClient" alias="aws.robomaker"/>
    <service id="Aws\Route53\Route53Client" alias="aws.route53"/>
    <service id="Aws\Route53Domains\Route53DomainsClient" alias="aws.route53domains"/>
    <service id="Aws\Route53Resolver\Route53ResolverClient" alias="aws.route53resolver"/>
    <service id="Aws\LexRuntimeService\LexRuntimeServiceClient" alias="aws.lexruntimeservice"/>
    <service id="Aws\SageMakerRuntime\SageMakerRuntimeClient" alias="aws.sagemakerruntime"/>
    <service id="Aws\S3Control\S3ControlClient" alias="aws.s3control"/>
    <service id="Aws\SageMaker\SageMakerClient" alias="aws.sagemaker"/>
    <service id="Aws\SecretsManager\SecretsManagerClient" alias="aws.secretsmanager"/>
    <service id="Aws\SecurityHub\SecurityHubClient" alias="aws.securityhub"/>
    <service id="Aws\ServerlessApplicationRepository\ServerlessApplicationRepositoryClient" alias="aws.serverlessapplicationrepository"/>
    <service id="Aws\ServiceCatalog\ServiceCatalogClient" alias="aws.servicecatalog"/>
    <service id="Aws\ServiceDiscovery\ServiceDiscoveryClient" alias="aws.servicediscovery"/>
    <service id="Aws\Shield\ShieldClient" alias="aws.shield"/>
    <service id="Aws\signer\signerClient" alias="aws.signer"/>
    <service id="Aws\PinpointSMSVoice\PinpointSMSVoiceClient" alias="aws.pinpointsmsvoice"/>
    <service id="Aws\Sms\SmsClient" alias="aws.sms"/>
    <service id="Aws\SnowBall\SnowBallClient" alias="aws.snowball"/>
    <service id="Aws\Sns\SnsClient" alias="aws.sns"/>
    <service id="Aws\Ssm\SsmClient" alias="aws.ssm"/>
    <service id="Aws\Sfn\SfnClient" alias="aws.sfn"/>
    <service id="Aws\StorageGateway\StorageGatewayClient" alias="aws.storagegateway"/>
    <service id="Aws\DynamoDbStreams\DynamoDbStreamsClient" alias="aws.dynamodbstreams"/>
    <service id="Aws\Sts\StsClient" alias="aws.sts"/>
    <service id="Aws\Support\SupportClient" alias="aws.support"/>
    <service id="Aws\Swf\SwfClient" alias="aws.swf"/>
    <service id="Aws\Textract\TextractClient" alias="aws.textract"/>
    <service id="Aws\TranscribeService\TranscribeServiceClient" alias="aws.transcribeservice"/>
    <service id="Aws\Transfer\TransferClient" alias="aws.transfer"/>
    <service id="Aws\Translate\TranslateClient" alias="aws.translate"/>
    <service id="Aws\WafRegional\WafRegionalClient" alias="aws.wafregional"/>
    <service id="Aws\Waf\WafClient" alias="aws.waf"/>
    <service id="Aws\WorkDocs\WorkDocsClient" alias="aws.workdocs"/>
    <service id="Aws\WorkLink\WorkLinkClient" alias="aws.worklink"/>
    <service id="Aws\WorkMail\WorkMailClient" alias="aws.workmail"/>
    <service id="Aws\WorkSpaces\WorkSpacesClient" alias="aws.workspaces"/>
    <service id="Aws\XRay\XRayClient" alias="aws.xray"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.9_yeNH1"/>
    <service id="Psr\Log\LoggerInterface" alias="logger" public="false"/>
    <service id=".service_locator.tcxuK57" alias="messenger.receiver_locator" public="false"/>
    <service id=".service_locator.89To16e" alias="messenger.retry_strategy_locator" public="false"/>
  </services>
</container>
